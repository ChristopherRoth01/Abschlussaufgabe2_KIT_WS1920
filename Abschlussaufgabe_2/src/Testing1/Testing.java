package Testing1;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import java.lang.reflect.InvocationTargetException;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import edu.kit.informatik.Terminal;
import tasktwo.userinterface.InputException;
import tasktwo.userinterface.Session;
import tasktwo.userinterface.commands.Command;
import tasktwo.userinterface.commands.CommandCenter;

public class Testing {

    Session session;
    CommandCenter center;

    /**
     * Resets before every Test
     */
    @Before
    public void Reset() {
        Terminal.test = false;
        // Bei Bedarf hier die ausgabe wieder einschalten!
        session = new Session();

        center = new CommandCenter(session);
    }

    @After
    public void TerminalBackToNormal() {
        Terminal.test = false;
    }

    /**
     * Helper Method, to simplify writing tests.
     * 
     * @param command
     * @throws SecurityException
     * @throws NoSuchMethodException
     * @throws InvocationTargetException
     * @throws IllegalArgumentException
     */
    private void e(String command) {

        try {
            Command command1 = center.getCommand(command);
            command1.execute();
        } catch (InputException i) {
            Terminal.printLine(i.getMessage());
        }
    }

    @Test
    public void basicTest() {

        e("start wood,spider,metal,wood,wood,wood,wood,plastic,plastic,plastic,plastic,plastic,plastic,metal,metal,metal,metal,wood,metal,wood,metal,plastic,wood,metal,plastic,wood,metal,plastic,wood,metal,plastic,wood,metal,plastic,wood,metal,plastic,wood,metal,plastic,wood,metal,plastic,wood,metal,plastic,wood,metal,plastic,spider,spider,spider,spider,snake,snake,snake,snake,snake,tiger,tiger,tiger,tiger,tiger,thunderstorm");
        assertTrue(Terminal.buffer.equals("OK"));
        e("list-resources");
        assertTrue(Terminal.buffer.equals("EMPTY"));
        e("list-buildings");
        assertTrue(Terminal.buffer.equals("EMPTY"));
        e("build?");
        assertTrue(Terminal.buffer.equals("EMPTY"));
        e("draw");
        assertTrue(Terminal.buffer.equals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.equals("spider"));
        e("rollD4 1");
        assertTrue(Terminal.buffer.equals("lose"));
        e("list-resources");
        assertTrue(Terminal.buffer.equals("EMPTY"));
        e("draw");
        assertTrue(Terminal.buffer.equals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.equals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.equals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.equals("wood"));
        e("list-resources");
        assertTrue(Terminal.buffer.equals("metal\nwood\nwood\nwood"));
        e("build?");
        assertTrue(Terminal.buffer.equals("club\nfireplace"));
        e("build axe");
        assertTrue(Terminal.buffer.contains("Error, "));
        e("build fireplace");
        assertTrue(Terminal.buffer.equals("OK"));
        e("list-buildings");
        assertTrue(Terminal.buffer.equals("fireplace"));
        e("draw");
        assertTrue(Terminal.buffer.equals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.equals("plastic"));
        e("draw");
        assertTrue(Terminal.buffer.equals("plastic"));
        e("draw");
        assertTrue(Terminal.buffer.equals("plastic"));
        e("draw");
        assertTrue(Terminal.buffer.equals("plastic"));
        e("draw");
        assertTrue(Terminal.buffer.equals("plastic"));
        e("draw");
        assertTrue(Terminal.buffer.equals("plastic"));
        e("list-resources");
        e("build?");
        assertTrue(Terminal.buffer.equals("ballon"));
        e("build ballon");
        assertTrue(Terminal.buffer.equals("win"));
        e("reset");
        e("draw");
        assertTrue(Terminal.buffer.equals("wood"));

    }

    // @Test
    public void testMain() {

        e("reset");
        assertTrue(Terminal.buffer.contains("Error, "));
        e("start wood,wood,wood,wood,wood,wood,wood,wood,wood,wood,wood,wood,wood,wood,wood,wood,wood,wood,wood,wood,metal,metal,metal,metal,metal,metal,metal,metal,metal,metal,metal,metal,plastic,plastic,plastic,plastic,plastic,plastic,plastic,plastic,plastic,plastic,plastic,plastic,plastic,plastic,plastic,plastic,tiger,tiger,tiger,tiger,tiger,spider,spider,spider,spider,spider,snake,snake,snake,snake,snake,thunderstorm");
        assertTrue(Terminal.buffer.contains("Error, "));
        e("start metal,metal,metal,metal,wood,wood,wood,wood,wood,wood,wood,wood,wood,wood,wood,wood,wood,wood,wood,wood,metal,metal,metal,metal,metal,metal,metal,metal,metal,metal,metal,metal,plastic,plastic,plastic,plastic,plastic,plastic,plastic,plastic,plastic,plastic,plastic,plastic,plastic,plastic,plastic,plastic,tiger,tiger,tiger,tiger,tiger,spider,spider,spider,spider,spider,snake,snake,snake,snake,snake,thunderstorm");
        assertTrue(Terminal.buffer.contentEquals("OK"));
        e("draw");
        e("draw");
        e("draw");
        e("draw");
        e("draw");
        e("draw");
        e("draw");
        e("draw");
        e("draw");
        e("draw");
        e("draw");
        e("draw");
        e("draw");
        e("draw");
        e("draw");
        e("draw");
        e("draw");
        e("draw");
        e("draw");
        e("draw");
        e("draw");
        e("draw");
        e("draw");
        e("draw");
        e("draw");
        e("draw");
        e("draw");
        e("draw");
        e("draw");
        e("draw");
        e("draw");
        e("draw");
        e("draw");
        e("draw");
        e("draw");
        e("draw");
        e("draw");
        e("draw");
        e("draw");
        e("draw");
        e("draw");
        e("draw");
        e("draw");
        e("draw");
        e("draw");
        e("draw");
        e("draw");
        e("draw");
        e("build steamboat");
        assertTrue(Terminal.buffer.contains("Error, "));
        e("build?");
        assertTrue(!Terminal.buffer.contains("steamboat"));
        e("build axe");
        assertTrue(Terminal.buffer.contentEquals("OK"));
        e("list-buildings");
        assertTrue(Terminal.buffer.contentEquals("axe"));
        e("build?");
        assertTrue(!Terminal.buffer.contains("axe"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("tiger"));
        e("rollD8 9");
        assertTrue(Terminal.buffer.contains("Error, "));
        e("rollD8 3");
        assertTrue(Terminal.buffer.contentEquals("survived"));
        e("build hangglider");
        assertTrue(Terminal.buffer.contentEquals("OK"));
        e("build club");
        assertTrue(Terminal.buffer.contains("Error, "));
        e("rollD6 6");
        assertTrue(Terminal.buffer.contentEquals("win"));
        e("build axe");
        assertTrue(Terminal.buffer.contains("Error, "));

        e("start metal,metal,metal,metal,metal,wood,wood,wood,wood,wood,wood,wood,wood,wood,wood,wood,wood,wood,wood,wood,wood,metal,metal,metal,metal,metal,metal,metal,metal,metal,metal,metal,metal,plastic,plastic,plastic,plastic,plastic,plastic,plastic,plastic,plastic,plastic,plastic,plastic,plastic,plastic,plastic,plastic,tiger,tiger,tiger,tiger,tiger,spider,spider,spider,spider,spider,snake,snake,snake,snake,snake,thunderstorm");
        assertTrue(Terminal.buffer.contains("Error, "));
        e("start metal,metal,metal,wood,wood,wood,plastic,plastic,spider,wood,wood,tiger,wood,wood,metal,plastic,plastic,metal,spider,snake,metal,wood,thunderstorm,plastic,plastic,plastic,wood,tiger,spider,wood,wood,metal,tiger,wood,plastic,spider,wood,wood,wood,wood,metal,metal,metal,metal,metal,metal,metal,metal,metal,plastic,plastic,plastic,plastic,plastic,plastic,plastic,plastic,spider,snake,snake,snake,snake,tiger,tiger");
        assertTrue(Terminal.buffer.contentEquals("OK"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("plastic"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("plastic"));
        e("build?");
        assertTrue(Terminal.buffer.contentEquals("axe\nclub\nfireplace\nshack"));

        e("build shack");
        assertTrue(Terminal.buffer.contentEquals("OK"));

        e("draw");
        assertTrue(Terminal.buffer.contentEquals("spider"));
        e("rollD4 1");
        assertTrue(Terminal.buffer.contentEquals("lose"));
        e("list-resources");
        assertTrue(Terminal.buffer.contentEquals("metal\nmetal\nwood"));
        e("list-buildings");
        assertTrue(Terminal.buffer.contentEquals("shack"));
        e("build?");
        assertTrue(Terminal.buffer.contentEquals("EMPTY"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("build axe");
        assertTrue(Terminal.buffer.contains("Error, "));
        e("build club");
        assertTrue(Terminal.buffer.contentEquals("OK"));
        e("list-resources");
        assertTrue(Terminal.buffer.contentEquals("metal\nmetal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("tiger"));
        e("rollD8 4");
        assertTrue(Terminal.buffer.contentEquals("survived"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("plastic"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("plastic"));
        e("build?");
        assertTrue(Terminal.buffer.contentEquals("axe"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("build axe");
        assertTrue(Terminal.buffer.contentEquals("OK"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("spider"));
        e("rollD4 1");
        assertTrue(Terminal.buffer.contentEquals("survived"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("snake"));
        e("rollD6 1");
        assertTrue(Terminal.buffer.contentEquals("lose"));
        e("list-resources");
        assertTrue(Terminal.buffer.contentEquals("metal\nwood\nwood\nplastic\nplastic"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("build fireplace");
        assertTrue(Terminal.buffer.contentEquals("OK"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("thunderstorm"));
        e("list-buildings");
        assertTrue(Terminal.buffer.contentEquals("axe\nclub\nshack"));
        e("list-resources");
        assertTrue(Terminal.buffer.contentEquals("metal\nplastic\nplastic"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("plastic"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("plastic"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("plastic"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("build steamboat");
        assertTrue(Terminal.buffer.contains("Error, "));
        e("build?");
        assertTrue(Terminal.buffer.contentEquals("EMPTY"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("tiger"));
        e("rollD8 3");
        assertTrue(Terminal.buffer.contentEquals("survived"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("spider"));
        e("rollD4 2");
        assertTrue(Terminal.buffer.contentEquals("survived"));
        e("list-resources");
        assertTrue(Terminal.buffer.contentEquals("metal\nplastic\nplastic\nplastic\nplastic\nplastic\nwood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("build fireplace");
        assertTrue(Terminal.buffer.contentEquals("OK"));
        e("list-buildings");
        assertTrue(Terminal.buffer.contentEquals("fireplace\naxe\nclub\nshack"));
        e("list-resources");
        assertTrue(Terminal.buffer.contentEquals("metal\nplastic\nplastic\nplastic\nplastic\nplastic"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("tiger"));
        e("rollD8 8");
        assertTrue(Terminal.buffer.contentEquals("survived"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contains("plastic"));
        e("build?");
        assertTrue(Terminal.buffer.contentEquals("ballon"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("spider"));
        e("rollD4 4444444444444444444444");
        assertTrue(Terminal.buffer.contains("Error, "));
        e("draw");
        assertTrue(Terminal.buffer.contains("Error, "));
        e("rollD4 1");
        assertTrue(Terminal.buffer.contentEquals("survived"));
        e("rollD4 1");
        assertTrue(Terminal.buffer.contains("Error, "));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("plastic"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("plastic"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("plastic"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("plastic"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("plastic"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("plastic"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("plastic"));

        e("draw");
        assertTrue(Terminal.buffer.contentEquals("plastic"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("spider"));
        e("rollD4 4");
        assertTrue(Terminal.buffer.contentEquals("survived"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("snake"));
        e("rollD6 6");
        assertTrue(Terminal.buffer.contentEquals("survived"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("snake"));
        e("rollD6 6");
        assertTrue(Terminal.buffer.contentEquals("survived"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("snake"));
        e("rollD6 6");
        assertTrue(Terminal.buffer.contentEquals("survived"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("snake"));
        e("rollD6 6");
        assertTrue(Terminal.buffer.contentEquals("survived"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("tiger"));
        e("rollD8 8");
        assertTrue(Terminal.buffer.contentEquals("survived"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("tiger"));
        e("rollD8 8");
        assertTrue(Terminal.buffer.contentEquals("survived"));
        e("build?");
        assertTrue(Terminal.buffer.contentEquals("ballon\nhangglider\nsailingraft\nsteamboat"));
        e("build sailingraft");
        assertTrue(Terminal.buffer.contentEquals("OK"));
        e("rollD8 6");
        assertTrue(Terminal.buffer.contains("Error, "));
        e("build hangglider");
        assertTrue(Terminal.buffer.contains("Error, "));
        e("rollD6 2");
        assertTrue(Terminal.buffer.contentEquals("lose"));
        e("list-resources");
        e("build?");
        assertTrue(Terminal.buffer.contentEquals("ballon\nsteamboat"));
        e("build ballon");
        assertTrue(Terminal.buffer.contentEquals("win"));
        e("build steamboat");
        assertTrue(Terminal.buffer.contains("Error, "));
        e("quit");

    }

    @Test
    public void genericTest() {
        e("start wood,wood,metal,metal,plastic,plastic,spider,wood,wood,wood,wood,metal,metal,plastic,plastic,thunderstorm,metal,metal,metal,metal,metal,metal,metal,metal,metal,metal,metal,metal,wood,wood,wood,wood,wood,wood,wood,wood,wood,wood,plastic,snake,snake,snake,snake,snake,spider,spider,spider,spider,tiger,tiger,tiger,tiger,tiger,plastic,plastic,plastic,plastic,plastic,plastic,plastic,plastic,plastic,plastic,plastic");
        assertTrue(Terminal.buffer.contentEquals("OK"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("plastic"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("plastic"));
        e("build shack");
        assertTrue(Terminal.buffer.contentEquals("OK"));
        e("list-resources");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("build?");
        assertTrue(Terminal.buffer.contentEquals("EMPTY"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("spider"));
        e("draw");
        assertTrue(Terminal.buffer.contains("Error,"));
        e("rollD4 1");
        assertTrue(Terminal.buffer.contentEquals("lose"));
        e("list-resources");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("plastic"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("plastic"));
        e("build hangglider");
        assertTrue(Terminal.buffer.contains("Error,"));
        e("build sailingraft");
        assertTrue(Terminal.buffer.contentEquals("OK"));
        e("draw");
        assertTrue(Terminal.buffer.contains("Error,"));
        e("rollD7 5");
        assertTrue(Terminal.buffer.contains("Error,"));
        e("rollD6 5");
        assertTrue(Terminal.buffer.contentEquals("win"));
        e("list-buildings");
        assertTrue(Terminal.buffer.contains("shack"));
        e("build?");
        assertTrue(Terminal.buffer.contains("Error,"));
        e("reset");
        assertTrue(Terminal.buffer.contentEquals("OK"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("plastic"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("plastic"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("spider"));
        e("build?");
        assertTrue(Terminal.buffer.contains("Error,"));
        e("rollD4 4");
        assertTrue(Terminal.buffer.contentEquals("survived"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("plastic"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("plastic"));
        e("build fireplace");
        assertTrue(Terminal.buffer.contentEquals("OK"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("thunderstorm"));
        e("build?");
        assertTrue(Terminal.buffer.contentEquals("EMPTY"));
        e("list-resources");
        assertTrue(Terminal.buffer.contentEquals("EMPTY"));
        e("list-buildings");
        assertTrue(Terminal.buffer.contentEquals("EMPTY"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("build fireplace");
        assertTrue(Terminal.buffer.contentEquals("OK"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("plastic"));
        e("build ballon");
        assertTrue(Terminal.buffer.contains("Error,"));
        e("build steamboat");
        assertTrue(Terminal.buffer.contentEquals("win"));
        e("start tiger,tiger,tiger,tiger,tiger,snake,snake,snake,snake,snake,spider,spider,spider,spider,wood,wood,wood,thunderstorm,wood,wood,wood,wood,wood,wood,wood,wood,wood,wood,wood,wood,wood,metal,metal,metal,metal,metal,metal,metal,metal,metal,metal,metal,metal,metal,metal,metal,metal,plastic,plastic,plastic,plastic,plastic,plastic,plastic,plastic,plastic,plastic,plastic,plastic,plastic,plastic,plastic,plastic");
        assertTrue(Terminal.buffer.contains("Error,"));
        e("start tiger,tiger,tiger,tiger,tiger,snake,snake,snake,snake,snake,spider,spider,spider,spider,wood,wood,wood,thunderstorm,wood,wood,wood,wood,wood,wood,wood,wood,wood,wood,metal,metal,metal,metal,metal,metal,metal,metal,metal,metal,metal,metal,metal,metal,metal,metal,plastic,plastic,plastic,plastic,plastic,plastic,plastic,plastic,plastic,plastic,plastic,plastic,plastic,plastic,plastic,plastic,wood,wood,wood,spider");
        assertTrue(Terminal.buffer.contentEquals("OK"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("tiger"));
        e("rollD00008 0");
        assertTrue(Terminal.buffer.contains("Error,"));
        e("rollD8 +002");
        assertTrue(Terminal.buffer.contentEquals("lose"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("tiger"));
        e("rollD8 +002");
        assertTrue(Terminal.buffer.contentEquals("lose"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("tiger"));
        e("rollD8 +002");
        assertTrue(Terminal.buffer.contentEquals("lose"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("tiger"));
        e("rollD8 +002");
        assertTrue(Terminal.buffer.contentEquals("lose"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("tiger"));
        e("rollD8 +002");
        assertTrue(Terminal.buffer.contentEquals("lose"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("snake"));
        e("rollD+6 +002");
        assertTrue(Terminal.buffer.contentEquals("lose"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("snake"));
        e("rollD+6 +002");
        assertTrue(Terminal.buffer.contentEquals("lose"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("snake"));
        e("rollD+6 +002");
        assertTrue(Terminal.buffer.contentEquals("lose"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("snake"));
        e("rollD+6 +002");
        assertTrue(Terminal.buffer.contentEquals("lose"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("snake"));
        e("rollD+6 +002");
        assertTrue(Terminal.buffer.contentEquals("lose"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("spider"));
        e("rollD+4 +004");
        assertTrue(Terminal.buffer.contentEquals("survived"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("spider"));
        e("rollD+4 +004");
        assertTrue(Terminal.buffer.contentEquals("survived"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("spider"));
        e("rollD+4 +004");
        assertTrue(Terminal.buffer.contentEquals("survived"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("spider"));
        e("rollD+4 +004");
        assertTrue(Terminal.buffer.contentEquals("survived"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("thunderstorm"));
        e("list-resources");
        assertTrue(Terminal.buffer.contentEquals("EMPTY"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("plastic"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("plastic"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("plastic"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("plastic"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("plastic"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("plastic"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("plastic"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("plastic"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("plastic"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("plastic"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("plastic"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("plastic"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("plastic"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("plastic"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("plastic"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("plastic"));
        e("build shack");
        assertTrue(Terminal.buffer.contentEquals("OK"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("list-bildings");
        assertTrue(Terminal.buffer.contains("Error,"));
        e("list-buildings");
        assertTrue(Terminal.buffer.contentEquals("shack"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("spider"));
        e("rollD4 2");
        assertTrue(Terminal.buffer.contentEquals("lose"));
        e("draw");
        assertTrue(Terminal.buffer.contains("Error,"));
        e("build?");
        assertTrue(Terminal.buffer.contentEquals("club"));
        e("build club");
        assertTrue(Terminal.buffer.contains("lost"));
        e("start thunderstorm,tiger,tiger,tiger,tiger,tiger,snake,snake,snake,snake,spider,spider,spider,spider,wood,wood,wood,metal,metal,metal,spider,metal,metal,metal,metal,plastic,plastic,plastic,plastic,plastic,plastic,plastic,plastic,snake,wood,wood,wood,wood,wood,wood,wood,wood,wood,wood,wood,wood,wood,metal,metal,metal,metal,metal,metal,metal,metal,metal,plastic,plastic,plastic,plastic,plastic,plastic,plastic,plastic");
        assertTrue(Terminal.buffer.contentEquals("OK"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("thunderstorm"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("tiger"));
        e("rollD8 +002");
        assertTrue(Terminal.buffer.contentEquals("lose"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("tiger"));
        e("rollD8 +002");
        assertTrue(Terminal.buffer.contentEquals("lose"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("tiger"));
        e("rollD8 +002");
        assertTrue(Terminal.buffer.contentEquals("lose"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("tiger"));
        e("rollD8 +002");
        assertTrue(Terminal.buffer.contentEquals("lose"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("tiger"));
        e("rollD8 +002");
        assertTrue(Terminal.buffer.contentEquals("lose"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("snake"));
        e("rollD6 +002");
        assertTrue(Terminal.buffer.contentEquals("lose"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("snake"));
        e("rollD6 +002");
        assertTrue(Terminal.buffer.contentEquals("lose"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("snake"));
        e("rollD6 +002");
        assertTrue(Terminal.buffer.contentEquals("lose"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("snake"));
        e("rollD6 +002");
        assertTrue(Terminal.buffer.contentEquals("lose"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("spider"));
        e("rollD4 +002");
        assertTrue(Terminal.buffer.contentEquals("lose"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("spider"));
        e("rollD4 +002");
        assertTrue(Terminal.buffer.contentEquals("lose"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("spider"));
        e("rollD4 +002");
        assertTrue(Terminal.buffer.contentEquals("lose"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("spider"));
        e("rollD4 +002");
        assertTrue(Terminal.buffer.contentEquals("lose"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("build?");
        assertTrue(Terminal.buffer.contains("fireplace"));
        e("build axe");
        assertTrue(Terminal.buffer.contentEquals("OK"));
        e("build club");
        assertTrue(Terminal.buffer.contentEquals("OK"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("spider"));
        e("rollD+4 1");
        assertTrue(Terminal.buffer.contentEquals("survived"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("plastic"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("plastic"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("plastic"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("plastic"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("plastic"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("plastic"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("plastic"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("plastic"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("snake"));
        e("rollD6 1");
        assertTrue(Terminal.buffer.contentEquals("lose"));
        e("list-resources");
        assertTrue(Terminal.buffer.contentEquals("EMPTY"));
        e("list-buildings");
        assertFalse(Terminal.buffer.contentEquals("EMPTY"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("plastic"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("plastic"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("plastic"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("plastic"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("plastic"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("plastic"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("plastic"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("plastic"));
        e("draw");
        assertTrue(Terminal.buffer.contains("Error,"));
        e("build hangglider");
        assertTrue(Terminal.buffer.contentEquals("OK"));
        e("build fireplace");
        assertTrue(Terminal.buffer.contains("Error,"));
        e("rollD6 1");
        assertTrue(Terminal.buffer.contentEquals("lose"));
        e("build sailingraft");
        assertTrue(Terminal.buffer.contentEquals("OK"));
        e("rollD6 1");
        assertTrue(Terminal.buffer.contentEquals("lose"));
        e("build shack");
        assertTrue(Terminal.buffer.contentEquals("OK"));
        e("build fireplace");
        assertTrue(Terminal.buffer.contains("OK\nlost"));
        e("reset");
        assertTrue(Terminal.buffer.contentEquals("OK"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("thunderstorm"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("tiger"));
        e("rollD8 +002");
        assertTrue(Terminal.buffer.contentEquals("lose"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("tiger"));
        e("rollD8 +002");
        assertTrue(Terminal.buffer.contentEquals("lose"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("tiger"));
        e("rollD8 +002");
        assertTrue(Terminal.buffer.contentEquals("lose"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("tiger"));
        e("rollD8 +002");
        assertTrue(Terminal.buffer.contentEquals("lose"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("tiger"));
        e("rollD8 +002");
        assertTrue(Terminal.buffer.contentEquals("lose"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("snake"));
        e("rollD6 +002");
        assertTrue(Terminal.buffer.contentEquals("lose"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("snake"));
        e("rollD6 +002");
        assertTrue(Terminal.buffer.contentEquals("lose"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("snake"));
        e("rollD6 +002");
        assertTrue(Terminal.buffer.contentEquals("lose"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("snake"));
        e("rollD6 +002");
        assertTrue(Terminal.buffer.contentEquals("lose"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("spider"));
        e("rollD4 +002");
        assertTrue(Terminal.buffer.contentEquals("lose"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("spider"));
        e("rollD4 +002");
        assertTrue(Terminal.buffer.contentEquals("lose"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("spider"));
        e("rollD4 +002");
        assertTrue(Terminal.buffer.contentEquals("lose"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("spider"));
        e("rollD4 +002");
        assertTrue(Terminal.buffer.contentEquals("lose"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("build?");
        assertTrue(Terminal.buffer.contains("fireplace"));
        e("build axe");
        assertTrue(Terminal.buffer.contentEquals("OK"));
        e("build club");
        assertTrue(Terminal.buffer.contentEquals("OK"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("spider"));
        e("rollD+4 1");
        assertTrue(Terminal.buffer.contentEquals("survived"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("plastic"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("plastic"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("plastic"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("plastic"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("plastic"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("plastic"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("plastic"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("plastic"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("snake"));
        e("rollD6 1");
        assertTrue(Terminal.buffer.contentEquals("lose"));
        e("list-resources");
        assertTrue(Terminal.buffer.contentEquals("EMPTY"));
        e("list-buildings");
        assertTrue(!Terminal.buffer.contentEquals("EMPTY"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("wood"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("metal"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("plastic"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("plastic"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("plastic"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("plastic"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("plastic"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("plastic"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("plastic"));
        e("draw");
        assertTrue(Terminal.buffer.contentEquals("plastic"));
        e("draw");
        assertTrue(Terminal.buffer.contains("Error,"));
        e("build hangglider");
        assertTrue(Terminal.buffer.contentEquals("OK"));
        e("build fireplace");
        assertTrue(Terminal.buffer.contains("Error,"));
        e("rollD6 1");
        assertTrue(Terminal.buffer.contentEquals("lose"));
        e("build shack");
        assertTrue(Terminal.buffer.contentEquals("OK"));
        e("build fireplace");
        assertTrue(Terminal.buffer.contentEquals("OK"));
        e("build sailingraft");
        assertTrue(Terminal.buffer.contentEquals("OK"));
        e("rollD6 1");
        assertTrue(Terminal.buffer.contentEquals("lose\nlost"));

    }
}